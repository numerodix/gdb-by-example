# C primitive types



## Unsigned integers



### unsigned char

- Size: 1 byte / 8 bits

```
{{<snippets/unsigned-char>}}
```

#### unsigned char

| Format                | Command         | Output          |
|-----------------------+-----------------+-----------------|
| show type             | `ptype village` | `unsigned char` |
| print as default      | `p village`     | `243 '\363'`    |
| **print as unsigned** | `p/u village`   | `243`           |
| print as signed       | `p/d village`   | `-13`           |
| display as binary     | `p/t village`   | `11110011`      |
| display as hex        | `p/x village`   | `0xf3`          |

#### unsigned char* (to a single char)

| Format                          | Command          | Output                         |
|---------------------------------+------------------+--------------------------------|
| show type                       | `ptype pvillage` | `unsigned char *`              |
| print as default                | `p pvillage`     | `0x7fffffffdfef "\363\356..."` |
| print deref as default          | `p *pvillage`    | `243 '\363'`                   |
| **print deref as unsigned**     | `p/u *pvillage`  | `243`                          |
| print deref as signed           | `p/d *pvillage`  | `-13`                          |
| examine as default              | `x pvillage`     | `0x7fffffffdfef: 11110011`     |
| **examine as single char/byte** | `x/1ub pvillage` | `243`                          |

#### unsigned char[]

| Format                     | Command          | Output                         |
|----------------------------+------------------+--------------------------------|
| show type                  | `ptype villages` | `unsigned char [3]`            |
| print as default           | `p villages`     | `"\363q6"`                     |
| **print as unsigned**      | `p/u villages`   | `{243, 113, 54}`               |
| print as signed            | `p/d villages`   | `{-13, 113, 54}`               |
| examine as default         | `x villages`     | `0x7fffffffe019: 11110011`     |
| **examine as three chars** | `x/3ub villages` | `243     113     54`           |
| examine ... in binary      | `x/3tb villages` | `11110011  01110001  00110110` |
| examine ... in hex         | `x/3xb villages` | `0xf3  0x71  0x36`             |

#### unsigned char* (to an array)

| Format                     | Command           | Output                       |
|----------------------------+-------------------+------------------------------|
| show type                  | `ptype pvillages` | `unsigned char *`            |
| print as default           | `p pvillages`     | `0x7fffffffe019 "\363q6..."` |
| print deref as unsigned    | `p/u *pvillages`  | `243`                        |
| print deref as signed      | `p/d *pvillages`  | `-13`                        |
| examine as default         | `x pvillages`     | `0x7fffffffe019: -13`        |
| **examine as three chars** | `x/3ub pvillages` | `243     113     54`         |


### unsigned short

- Size: 2 bytes / 16 bits

```
{{<snippets/unsigned-short>}}
```

#### unsigned short

| Format                | Command      | Output             |
|-----------------------+--------------+--------------------|
| show type             | `ptype town` | `unsigned short`   |
| **print as default**  | `p town`     | `61000`            |
| **print as unsigned** | `p/u town`   | `61000`            |
| print as signed       | `p/d town`   | `-4536`            |
| display as binary     | `p/t town`   | `1110111001001000` |
| display as hex        | `p/x town`   | `0xee48`           |

#### unsigned short* (to a single short)

| Format                      | Command       | Output                       |
|-----------------------------+---------------+------------------------------|
| show type                   | `ptype ptown` | `unsigned short *`           |
| print as default            | `p ptown`     | `0x7fffffffdfd6`             |
| **print deref as default**  | `p *ptown`    | `61000`                      |
| **print deref as unsigned** | `p/u *ptown`  | `61000`                      |
| print deref as signed       | `p/d *ptown`  | `-4536`                      |
| examine as default          | `x ptown`     | `0x7fffffffdfd6: -539693496` |
| **examine as single short** | `x/1uh ptown` | `61000`                      |

#### unsigned short[]

| Format                     | Command       | Output                    |
|----------------------------+---------------+---------------------------|
| show type                  | `ptype towns` | `unsigned short [3]`      |
| **print as default**       | `p towns`     | `{61000, 33109, 41001}`   |
| **print as unsigned**      | `p/u towns`   | `{61000, 33109, 41001}`   |
| print as signed            | `p/d towns`   | `{-4536, -32427, -24535}` |
| examine as default         | `x towns`     | `0x7fffffffe012: -4536`   |
| **examine as three chars** | `x/3uh towns` | `61000   33109   41001`   |
| examine ... in binary      | `x/3th towns` | `1110111001001000 ...`    |
| examine ... in hex         | `x/3xh towns` | `0xee48  0x8155  0xa029`  |

#### unsigned short* (to an array)

| Format                     | Command        | Output                  |
|----------------------------+----------------+-------------------------|
| show type                  | `ptype ptowns` | `unsigned char *`       |
| print as default           | `p ptowns`     | `0x7fffffffe012`        |
| print deref as unsigned    | `p/u *ptowns`  | `61000`                 |
| print deref as signed      | `p/d *ptowns`  | `-4536`                 |
| examine as default         | `x ptowns`     | `-4536`                 |
| **examine as three chars** | `x/3ub ptowns` | `61000   33109   41001` |



## Characters and strings

### Code

```
{{<snippets/chars>}}
```

### Type and size

gdb knows the size and type of the character variables:

```
(gdb) ptype initial
type = char
(gdb) ptype first
type = char [5]
(gdb) ptype last
type = char [7]
```

But all it knows about the pointer variables is that they're pointers to a char:

```
(gdb) ptype pinitial 
type = char *
(gdb) ptype pfirst 
type = char *
```

### Displaying character variables

As chars/strings - this is gdb's default formatting:

```
(gdb) p initial
$13 = 72 'H'
(gdb) p first
$14 = "Hans"
(gdb) p last
$15 = "Zimmer"
```

As numbers:

```
(gdb) p/d initial
$16 = 72
(gdb) p/d first
$17 = {72, 97, 110, 115, 0}
```

Using the `x` command:

```
(gdb) x/c &initial
0x7fffffffe07f: 72 'H'
(gdb) x &first
0x7fffffffe09c: "Hans"
(gdb) x/s &first
0x7fffffffe09c: "Hans"
```

### Displaying pointers to chars

```
(gdb) p pinitial        # not very useful
$58 = 0x7fffffffe07f "H\177\340\377\377\377\177"
(gdb) p *pinitial       # deference
$56 = 72 'H'
(gdb) p/c *pinitial     # and display as char
$57 = 72 'H'
(gdb) x/c pinitial
0x7fffffffe07f: 72 'H'
```

### Display pointers to strings

With the default formatter gdb displays the pointer value and (optimistically?) dereferences it and displays the bytes as a null terminated string.

```
(gdb) p pfirst   
$63 = 0x7fffffffe09c "Hans"
```

With the `x` command:

```
(gdb) x/s pfirst                # same end result
0x7fffffffe09c: "Hans"
(gdb) x/5c pfirst               # show me 5 chars
0x7fffffffe09c: 72 'H'  97 'a'  110 'n' 115 's' 0 '\000'
```

Trying to deference the pointer confuses gdb:

```
(gdb) p *pfirst 
$78 = 72 'H'
(gdb) p/s *pfirst               # doesn't help
$79 = 72 'H'
```
